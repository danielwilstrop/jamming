{"version":3,"sources":["utl/spotify.js","components/searchbar/searchbar.js","components/track/track.js","components/tracklist/tracklist.js","components/SearchResults/searchresults.js","components/playlist/playlist.js","components/app/App.js","reportWebVitals.js","index.js"],"names":["accessToken","Spotify","getAccessToken","hasAccessToken","window","location","href","match","hasExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","ok","console","log","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","preview","preview_url","art","images","url","savePlaylist","playlistName","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris","Searchbar","props","state","bind","handleTermChange","handleKeyPress","login","this","onSearch","event","key","e","setState","target","value","className","placeholder","onChange","onKeyUp","onClick","React","Component","Track","play","addTrack","renderAction","removeTrack","isRemoval","onAdd","onRemove","src","alt","Tracklist","Searchresults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlisttracks","onSave","App","playlistTracks","updatePlaylistName","find","savedTrack","push","filter","currentTrack","trackUris","playlistname","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa40cc94.chunk.js","sourcesContent":["const clientId = '5a72b9db55194aeb9d98a42cb5c5544e';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\n\nconst Spotify = {\n\n    // Gets access token from Spotify\n    getAccessToken() {\n        if(accessToken) {\n            return accessToken;\n        }\n        const hasAccessToken = window.location.href.match(/access_token=([^&]*)/);\n        const hasExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n        if (hasAccessToken && hasExpiresIn) {\n            accessToken = hasAccessToken[1];\n            const expiresIn = Number(hasExpiresIn[1]);\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n       // Uses access token to return a response from the Spoitify API using user serach term from SearchBar\n       search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(\n            response => { \n                if (response.ok) {\n                    console.log(response.json)\n                    return response.json();\n                } else {\n                    console.log('API request failed');\n                }\n        }).then(\n            jsonResponse => {\n            if(!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri,\n                    preview: track.preview_url,\n                    art: track.album.images[2].url\n            }));\n        });\n    },\n    // Gets a user's ID from Spotify, creates a new playlist on user's account, and adds tracks to that playlist\n    savePlaylist(playlistName, trackURIs) {\n        if (!playlistName || !trackURIs.length) {\n            return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessToken}`\n        };\n        let userId;\n\n        // Return user's ID from Spotify API\n        return fetch('https://api.spotify.com/v1/me', {\n            headers: headers\n        }).then(\n            response => {\n                if(response.ok) {\n                    return response.json();\n                } \n        }).then(\n            jsonResponse => {\n                userId = jsonResponse.id;\n\n                // Adds playlist to user's account\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({name: playlistName})\n                }).then(\n                    response => {\n                    if (response.ok) {\n                        return response.json();\n                    } else {\n                        console.log('API request failed');\n                    }\n                }).then(\n                    jsonResponse => {\n                        const playlistId = jsonResponse.id;\n                        console.log(playlistId)\n                         // Adds tracks to new playlist \n                         return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                            headers: headers,\n                            method: 'POST',\n                            body: JSON.stringify({ uris: trackURIs})\n                        });\n                        \n                    });\n            });\n    }\n}\n\nexport default Spotify;\n","import React from 'react'\nimport Spotify from '../../utl/spotify';\nimport './searchbar.css';\n\nclass Searchbar extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { term: ''}\n    this.search = this.search.bind(this)\n    this.handleTermChange = this.handleTermChange.bind(this)\n    this.handleKeyPress = this.handleKeyPress.bind(this)\n    this.login = this.login.bind(this)\n    }\n\n    search() {\n        this.props.onSearch(this.state.term)\n    }\n\n    handleKeyPress(event) {\n        if (event.key === 'Enter'){\n           this.search()\n        }\n    }\n\n    handleTermChange(e) {\n        this.setState( {term: e.target.value} )\n    }\n\n    login() {\n        Spotify.getAccessToken()\n    }\n\n    render() {\n        return <div className=\"SearchBar\">\n                    <input placeholder=\"Enter A Song, Album, or Artist\" onChange = {this.handleTermChange} onKeyUp = {this.handleKeyPress} />\n                    <div className = \"container\">\n                        <button className=\"SearchButton\" onClick = {this.login}>SPOTIFY LOGIN</button>\n                        <button className=\"SearchButton\"  onClick = {this.search}>SEARCH</button>\n                    </div>\n                </div>\n    }\n}\n\nexport default Searchbar;","import React from 'react'\nimport './track.css';\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { play: false }\n        this.addTrack = this.addTrack.bind(this)\n        this.renderAction = this.renderAction.bind(this)\n        this.removeTrack = this.removeTrack.bind(this)\n    }\n   \n\n    renderAction() {\n        if (this.props.isRemoval) {\n            return <button className = \"Track-action\" onClick = {this.removeTrack}>-</button>\n        } else {\n            return <button className = \"Track-action\" onClick = {this.addTrack}>+</button>\n        }\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track)\n    }\n\n    render() {\n    return  <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <img src = {this.props.track.art} alt = \"album art\" />\n                    <p>{this.props.track.name} | {this.props.track.artist} </p>\n                    {this.renderAction()}\n                </div>\n            </div>\n            \n        \n    }\n}\n\nexport default Track;","import React from 'react'\nimport './tracklist.css';\nimport Track from '../track/track'\n\nclass Tracklist extends React.Component {\n    render() { \n        return ( \n        <div className=\"TrackList\">\n            {\n                this.props.tracks.map(track => {\n                    return <Track track = {track}\n                                    key = {track.id} \n                                    onAdd = {this.props.onAdd} \n                                    onRemove = {this.props.onRemove}    \n                                    isRemoval = {this.props.isRemoval} />\n                })\n            }\n        </div> \n        )\n    }\n}\n\nexport default Tracklist;","import React from 'react'\nimport './searchresults.css';\nimport Tracklist from '../tracklist/tracklist'\n\nclass Searchresults extends React.Component {\n    render() { \n        return (\n        <div className=\"SearchResults\">\n            <h2>Results</h2>\n            <Tracklist tracks = {this.props.searchResults} onAdd = {this.props.onAdd} isRemoval = {false} />\n        </div>\n        )\n    }\n}\n\nexport default Searchresults;","import React from 'react'\nimport Tracklist from '../tracklist/tracklist';\nimport './playlist.css';\n\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.handleNameChange = this.handleNameChange.bind(this)\n    }\n    handleNameChange(e) {\n        this.props.onNameChange(e.target.value)\n    }\n\n    render() { return (\n                <div className=\"Playlist\">\n                    <input defaultValue={'Playlist Name'} onChange = {this.handleNameChange} />\n                    <Tracklist tracks = {this.props.playlisttracks} onRemove = {this.props.onRemove} isRemoval = {true} />\n                    <button className=\"Playlist-save\" onClick = {this.props.onSave}>SAVE TO SPOTIFY</button>\n                </div> )\n    }\n}\n\nexport default Playlist;","import React from 'react'\nimport Searchbar from '../searchbar/searchbar'\nimport SearchResults from '../SearchResults/searchresults'\nimport Playlist from '../playlist/playlist'\nimport './App.css'\nimport Spotify from '../../utl/spotify'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: [],\n                      }\n    this.addTrack = this.addTrack.bind(this)\n    this.removeTrack = this.removeTrack.bind(this)\n    this.updatePlaylistName = this.updatePlaylistName.bind(this)\n    this.savePlaylist = this.savePlaylist.bind(this)\n    this.search = this.search.bind(this)\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track)\n    this.setState({playlistTracks: tracks})\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id)\n    this.setState({playlistTracks: tracks})\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name})\n  }\n\n  savePlaylist() {\n    if (this.state.playlistTracks.length <=0){\n      return\n    }\n    const trackUris = this.state.playlistTracks.map(track => track.uri)\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then( () => this.setState(\n                                         { playlistName: 'Enter Your Playlist Name', \n                                          playlistTracks: []\n                                        }))\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => this.setState({searchResults: searchResults}))\n  }\n\n  render() {\n    return <div>\n              <h1>Pla<span className=\"highlight\">yyy</span>list</h1>\n                <div className=\"App\">\n                  <Searchbar onSearch = {this.search} />\n                  <div className=\"App-playlist\">\n                  <SearchResults searchResults = {this.state.searchResults}\n                                 onAdd = {this.addTrack} isRemoval = {true} />\n                  <Playlist playlistname = {this.state.playlistName} \n                            playlisttracks = {this.state.playlistTracks}\n                            onRemove = {this.removeTrack}\n                            onNameChange = {this.updatePlaylistName}\n                            onSave = {this.savePlaylist} />\n                  </div>\n                </div>\n            </div>\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}